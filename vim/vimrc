""""""""""""""""""""""""""""""""""""""""""""""""""
" General
""""""""""""""""""""""""""""""""""""""""""""""""""
" Get out of vi's compatible mode
set nocompatible

" How many lines of history
set history=5000

" Set to auto read when a file is changed from the outside
"set autoread

" Set map leader
let mapleader = ","
let g:mapleader = ","

" Fast saving
nmap <LEADER>w :w<CR>

" Fast reloading of the .vimrc
" map <LEADER>s :source ~/.vimrc<CR>

" Fast editing of .vimrc
" map <LEADER>e :e! ~/.vimrc<CR>

" When .vimrc is edited, reload it
autocmd! bufwritepost vimrc source ~/.vim/vimrc

" Show commands as they are typed
set showcmd

" Enable Modeline magic
set modeline

" For vimpager
set modifiable

" Disable F1 heaper
nmap <F1> <nop>
imap <F1> <nop>

" Remove indenting on empty lines
fun! StripTrailingWhitespaces()
	let l = line(".")
	let c = col(".")
	%s/\s\+$//ge
	call cursor(l, c)
endfun
nnoremap <F2> :call StripTrailingWhitespaces()<CR>

" New line in normal mode
nnoremap <expr> <CR> SmartNewLine() ? "i<CR><Esc>" : "i0<C-D><CR><Esc>"

function! SmartNewLine()
if has("python3")
python3 << EOF
def f():
    import vim

    line = vim.current.line
    buffer = vim.current.buffer
    cursor_row, cursor_col = vim.current.window.cursor

    if not line[:cursor_col].lstrip():
        vim.command("return 0")
    else:
        vim.command("return 1")

f()
del f
EOF
elseif has("python")
python << EOF
def f():
    import vim

    line = vim.current.line
    buffer = vim.current.buffer
    cursor_row, cursor_col = vim.current.window.cursor

    if not line[:cursor_col].lstrip():
        vim.command("return 0")
    else:
        vim.command("return 1")

f()
del f
EOF
endif
endfunction

" indent shortcut
nmap <Tab> >>
nmap <S-Tab> <<
xnoremap <Tab>	>gv
xnoremap <S-Tab> <gv

" Word jumping
imap <M-Left> <C-Left>
imap <M-Right> <C-Right>
nmap <C-A> ^
imap <C-A> <Esc>^i
nmap <C-E> $
inoremap <expr> <C-E> pumvisible() ? "<C-E>" : "<End>"
" imap <C-D> <End>
noremap ' `
noremap ` '

" split window jumping
nnoremap <silent> <M-UP>		:wincmd k<CR>
nnoremap <silent> <M-Down>	:wincmd j<CR>
nnoremap <silent> <M-Left>	:wincmd h<CR>
nnoremap <silent> <M-Right>	:wincmd l<CR>
nnoremap <silent> <F6> :set paste!<CR>:set paste?<CR>
nnoremap <F7> :set number!<CR>:set number?<CR>
imap <F6> <ESC><F6>
imap <F7> <ESC><F7>i

" tab page jumping
nnoremap <silent> <C-V><C-PageUp> :tabp<CR>
nnoremap <silent> <C-V><C-PageDown> :tabn<CR>

" Keyword completion
" imap <M-Up> <C-N>
" imap <M-Right> <C-N>
" imap <M-Left> <C-P>
" imap <M-Down> <C-P>

""""""""""""""""""""""""""""""""""""""""""""""""""
" Encoding
""""""""""""""""""""""""""""""""""""""""""""""""""
" Use UTF-8
set encoding=utf-8

" Save file as UTF-8
set fileencoding=utf-8

" List of charsets to recognize
set fileencodings=utf-8,big5,euc-jp,gbk,euc-kr,utf-bom,iso8859-1

" Terminal encoding
set termencoding=utf-8

" Treat ambiguous characters as full width
set ambiwidth=single

" Big5
noremap <LEADER>b :e ++enc=big5<CR>:set tenc=big5<CR>

" UTF-8
noremap <LEADER>u :e ++enc=utf-8<CR>:set tenc=utf-8<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""
" Colours and Fonts
""""""""""""""""""""""""""""""""""""""""""""""""""
set t_Co=256

" Enable syntax highlighting
syntax enable

" Set colour scheme
colorscheme iblis

" Highlight current line in insert mode
function! s:EnterInsert()
	set cursorline
endfunction

function! s:LeaveInsert()
	set nocursorline
endfunction

autocmd InsertLeave * call s:LeaveInsert()
autocmd InsertEnter * call s:EnterInsert()

if has("gui_running")
	set guifont=Droid\ Sans\ Mono\ 14
endif

" Set cursorline
"hi cursorline cterm=none ctermbg=darkgrey

" Omni menu colors
" hi Pmenu ctermbg=darkgrey
" hi PmenuSel ctermbg=darkblue
" Pattern matching
" hi MatchParen ctermbg=11

" column ruler
set colorcolumn=80

""""""""""""""""""""""""""""""""""""""""""""""""""
" File formats
""""""""""""""""""""""""""""""""""""""""""""""""""
" Favourite file formats
set ffs=unix,dos

nmap <LEADER>fd :se ff=dos<CR>
nmap <LEADER>fu :se ff=unix<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""
" Filetypes
""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable filetype plugin
filetype plugin on
filetype indent on

autocmd! BufRead,BufNewFile *.conf set filetype=config

""""""""""""""""""""""""""""""""""""""""""""""""""
" Interface
""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn on wild menu
set wildmenu

" Show current position
set ruler

" Show line number
set number

" Don't redraw while running macros (faster)
"set lz

" Change buffer without saving
set hid

" Set backspace
set backspace=start,indent,eol

" Which keys to wrap
set whichwrap+=<,>,h,l

" Default value
set magic

" No sound for errors
set noerrorbells

" Show matching brackets
set showmatch

" Status line
set laststatus=2
"set statusline=%<%f%<%<%h%m%r%=%-20.(line=%03l,col=%02c%V,totlin=%L%)\%h%m%r%=%-30(,BfNm=%n%Y%)\%P
set rulerformat=%15(%c%V\ %p%%%)
"set cmdheight=2

" tab
set tabstop=4
set shiftwidth=4
set shiftround

""""""""""""""""""""""""""""""""""""""""""""""""""
" Search
""""""""""""""""""""""""""""""""""""""""""""""""""
" Ignore case
set ignorecase

" Show first match
set incsearch

" Highlight search results
set hls

" Default value
set wrapscan

nnoremap # *
nnoremap * #

""""""""""""""""""""""""""""""""""""""""""""""""""
" Tabs
""""""""""""""""""""""""""""""""""""""""""""""""""
"nmap cr= $F=a<SPACE><ESC>lcf;
"nmap cl= $F=hc^


" Hot keys
nmap <silent><C-T>c :tabnew<CR>
nmap <silent> <C-T>k :tabclose<CR>
nmap <silent> <C-H> :tabprev<CR>
nmap <silent> <C-L> :tabnext<CR>

set switchbuf=usetab

" Always show tab line
set stal=2

""""""""""""""""""""""""""""""""""""""""""""""""""
" Temp and Backups
""""""""""""""""""""""""""""""""""""""""""""""""""
set backup

set backupdir=~/.vim/backup
set directory=~/.vim/tmp

set nowb
set noswapfile
set noar

""""""""""""""""""""""""""""""""""""""""""""""""""
" Folding
""""""""""""""""""""""""""""""""""""""""""""""""""
" Default values
set foldenable
set fdl=0
set foldmethod=indent
"nnoremap <SPACE> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""
" Text
""""""""""""""""""""""""""""""""""""""""""""""""""
set expandtab

set lbr

set wrap

set ai
set si
set cindent
" Disable all the indent
" nmap <F2> :set noai nosi nocindent <CR>
set showmode
" Scheme
autocmd Filetype scheme set expandtab nocindent
" JavaScript
" autocmd Filetype javascript set omnifunc=syntaxcomplete#Complete

""""""""""""""""""""""""""""""""""""""""""""""""""
" Spell check
""""""""""""""""""""""""""""""""""""""""""""""""""
set nospell
set spelllang=en

hi clear SpellBad
hi clear SpellCap
hi clear SpellLocal
hi clear SpellRare

"map <LEADER>sn ]s
"map <LEADER>sp [s
"map <LEADER>sa zg
"map <LEADER>s? z=

"map <F5> :set spell!<CR><BAR>:echo "Spell check: " . strpart("OffOn", 3 * &spell, 3)<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""
" Quickfix
""""""""""""""""""""""""""""""""""""""""""""""""""
command! -bang -nargs=? QFix call QFixToggle(<bang>0)

function! QFixToggle(forced)
	if exists("g:qfix_win") && a:forced == 0
		cclose
		unlet g:qfix_win
	else
		copen 6
		let g:qfix_win = bufnr("$")
	endif
endfunction

nnoremap <leader>q :QFix<CR>
nmap <F9> :QFix<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""

	""""""""""""""""""""""""""""""""""""""""
	" Taglist
	""""""""""""""""""""""""""""""""""""""""
	" Usage
	" t		Open target in tab
	" o		Open target in window
	" u		Update taglist
	" q		Close taglist
	" <tab>	Jump to next file
	" <backspace>	Jump to previous file
	"
	" let Tlist_Ctags_Cmd = '/usr/local/bin/exctags'
	let Tlist_Auto_Update = 1
	" let Tlist_Auto_Open = 1
	let Tlist_Sort_Type = "name"
	let Tlist_WinWidth = 30
	" let Tlist_Show_One_File = 0
	" let Tlist_Exit_OnlyWindow = 1
	" let Tlist_Use_SingleClick = 1
	" let Tlist_File_Fold_Auto_Close = 1
	" let Tlist_Process_File_Always = 1
	" let Tlist_Enable_Fold_Column = 0
	let Tlist_Use_Right_Window = 1
	let tlist_python_settings = 'python;c:class;f:function;m:member;v:variable;i:import'
	nnoremap <F4> :TlistToggle<CR>

	""""""""""""""""""""""""""""""""""""""""
	" Slippery Snippet
	""""""""""""""""""""""""""""""""""""""""
	" let g:snip_start_tag = "«"
	" let g:snip_end_tag = "»"
	" let g:snippetsEmu_key = "<C-B>"

	""""""""""""""""""""""""""""""""""""""""
	" Nerd Tree
	""""""""""""""""""""""""""""""""""""""""
	" How to use?
	"
	" o       Open selected file, or expand selected dir
	" go      Open selected file, but leave cursor in the NERDTree
	" t       Open selected node in a new tab
	" T       Same as 't' but keep the focus on the current tab
	" <tab>   Open selected file in a split window
	" g<tab>  Same as <tab>, but leave the cursor on the NERDTree
	" !       Execute the current file
	" O       Recursively open the selected directory
	" x       Close the current nodes parent
	" X       Recursively close all children of the current node
	" e       Open a netrw for the current dir
	" q       Close the nerd tree split window
	let g:NERDTreeWinSize = 22
	let NERDTreeIgnore = ['\.pyc$', '\.pyo$', '^__pycache__$', '\~$']
	nnoremap <F3> :NERDTreeTabsToggle<CR>

	""""""""""""""""""""""""""""""""""""""""
	" Nerd Commenter
	""""""""""""""""""""""""""""""""""""""""
	" let g:NERDMapleader = ";c"

	""""""""""""""""""""""""""""""""""""""""
	" SuperTab
	""""""""""""""""""""""""""""""""""""""""
	let g:SuperTabDefaultCompletionType = "<c-n>"
	let g:SuperTabContextDefaultCompletionType = "<c-n>"
	let g:SuperTabCrMapping = 1

	""""""""""""""""""""""""""""""""""""""""
	" OmniCppComplete
	""""""""""""""""""""""""""""""""""""""""
	" map <F12> :!exctags -R --c-kinds=+p --fields=+iaS --extra=+q .<CR>

	""""""""""""""""""""""""""""""""""""""""
	" code_complete
	""""""""""""""""""""""""""""""""""""""""
	" autocmd BufNewFile,BufRead *.c,*.cpp set tags=~/.vim/tags
	" map <F12> :!exctags -R --c-kinds=+p --fields=+S .<CR>
	" let g:rs = "'<"	" Default `< >` caused problem in php indent
	" let g:re = ">'"
	" let g:completekey = "<c-p>"

	""""""""""""""""""""""""""""""""""""""""
	" Emmet (zenconding)
	""""""""""""""""""""""""""""""""""""""""
	let g:user_emmet_leader_key = "<c-c>"

	""""""""""""""""""""""""""""""""""""""""
	" Fugitive
	""""""""""""""""""""""""""""""""""""""""
	" set statusline=%<%f\ %h%m%r\ %{fugitive#statusline()}%=%-15(%c%V\ %p%%%)
	nnoremap <silent> <leader>s :Gwrite<CR>:GitGutter<CR>

	""""""""""""""""""""""""""""""""""""""""
	" js-lib-syntax
	""""""""""""""""""""""""""""""""""""""""
	let g:used_javascript_libs = 'jquery,angularjs,angularui'

	""""""""""""""""""""""""""""""""""""""""
	" vim-css3-syntax
	""""""""""""""""""""""""""""""""""""""""
	augroup VimCSS3Syntax
		autocmd!
		autocmd FileType css setlocal iskeyword+=-
	augroup END

	""""""""""""""""""""""""""""""""""""""""
	" nodejs-complete
	""""""""""""""""""""""""""""""""""""""""
	let g:nodejs_complete_config = { 'js_compl_fn': 'syntaxcomplete#Complete' }

	""""""""""""""""""""""""""""""""""""""""
	" jedi-vim
	""""""""""""""""""""""""""""""""""""""""
	let g:jedi#popup_select_first = 0
	let g:jedi#popup_on_dot = 0
	let g:jedi#use_tabs_not_buffers = 1
	let g:jedi#show_call_signatures = 0

	""""""""""""""""""""""""""""""""""""""""""""""
	"  Pep8
	""""""""""""""""""""""""""""""""""""""""""""""
	let g:pep8_map='<F8>'

	""""""""""""""""""""""""""""""""""""""""
	" YouCompleteMe
	""""""""""""""""""""""""""""""""""""""""
	" let g:ycm_add_preview_to_completeopt = 1
	" let g:ycm_autoclose_preview_window_after_completion = 1
	" let g:ycm_autoclose_preview_window_after_insertion = 1
	" let g:ycm_complete_in_comments = 1
	" let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>']
	" let g:ycm_filepath_completion_use_working_dir = 1
	" let g:ycm_filetype_blacklist = {
	" 	\ 'python': 1
	" 	\}

	""""""""""""""""""""""""""""""""""""""""
	" ultisnips
	""""""""""""""""""""""""""""""""""""""""
	let g:UltiSnipsExpandTrigger = "<c-p>"
	" let g:UltiSnipsJumpForwardTrigger = "<c-j>"
	" let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
	let g:UltiSnipsEditSplit = "vertical"
	let g:UltiSnipsSaveVisualTrigger = "<c-w>"
	let g:UltiSnipsSnippetsDir = '~/.vim/bundle/vim-snippets/UltiSnips'
	snoremap <silent> <s-tab> <Esc>:call UltiSnips#JumpBackwards()<cr>
	inoremap <c-x><c-k> <c-x><c-k>

	""""""""""""""""""""""""""""""""""""""""
	" vim-autocomplpop
	""""""""""""""""""""""""""""""""""""""""
	let g:AutoComplPopDontSelectFirst = 0

	""""""""""""""""""""""""""""""""""""""""
	" Renumber
	""""""""""""""""""""""""""""""""""""""""
	vnoremap <C-A> :Renumber a<CR>

	""""""""""""""""""""""""""""""""""""""""
	" Gitgutter
	""""""""""""""""""""""""""""""""""""""""
	hi SignColumn cterm=Bold ctermbg=None
	hi GitGutterAdd cterm=Bold ctermfg=green  ctermbg=None
	hi GitGutterChange cterm=Bold ctermfg=yellow ctermbg=None
	hi GitGutterDelete cterm=Bold ctermfg=red ctermbg=None
	hi GitGutterChangeDelete cterm=Bold ctermfg=yellow ctermbg=None

	""""""""""""""""""""""""""""""""""""""""
	" vim-slime
	""""""""""""""""""""""""""""""""""""""""
	let g:slime_target = "tmux"
	let g:slime_default_config = { "socket_name": "default", "target_pane": ":.1" }
	let g:slime_python_ipython = 1

	""""""""""""""""""""""""""""""""""""""""
	" SimpylFold
	""""""""""""""""""""""""""""""""""""""""
	let g:SimpylFold_docstring_preview = 1

	""""""""""""""""""""""""""""""""""""""""
	"  todo-or-not-todo
	""""""""""""""""""""""""""""""""""""""""
	let g:todo_checkbox_switch_style = 'menu'

	""""""""""""""""""""""""""""""""""""""""
	"  vim-plug
	""""""""""""""""""""""""""""""""""""""""
	call plug#begin('~/.vim/plugged')

	" html/css
	Plug 'mattn/emmet-vim', {'for': ['html', 'htmldjango', 'css']}
	Plug 'othree/html5.vim', {'for': 'html'}
	Plug 'hail2u/vim-css3-syntax', {'for': 'css'}

	" js
	Plug 'pangloss/vim-javascript', {'for': 'javascript'}
	Plug 'othree/javascript-libraries-syntax.vim', {'for': 'javascript'}
	Plug 'myhere/vim-nodejs-complete', {'for': 'javascript'}

	" php
	Plug 'StanAngeloff/php.vim', {'for': 'php'}

	" utils
	"" completion
	Plug 'ervandew/supertab'
	Plug 'iblis17/ultisnips' | Plug 'iblis17/vim-snippets'
	Plug 'vim-scripts/AutoComplPop'
	"" git
	Plug 'tpope/vim-fugitive'
	Plug 'airblade/vim-gitgutter'
	"" misc
	Plug 'tpope/vim-surround'
	Plug 'Raimondi/delimitMate'
	Plug 'scrooloose/nerdtree', {'on': 'NERDTreeTabsToggle'}
	Plug 'jistr/vim-nerdtree-tabs', {'on': 'NERDTreeTabsToggle'}
	Plug 'tomtom/tcomment_vim'
	Plug 'kshenoy/vim-signature'
	Plug 'powerline/powerline', {'rtp': 'powerline/bindings/vim/'}
	Plug 'michaeljsmith/vim-indent-object'
	Plug 'vim-scripts/L9'
	Plug 'vim-scripts/renumber.vim'
	Plug 'vim-scripts/taglist.vim', {'on': 'TlistToggle'}
	Plug 'vim-scripts/matchit.zip'
	Plug 'pi314/todo-or-not-todo.vim', {'branch': 'menu'}

	" julia
	Plug 'JuliaLang/julia-vim'

	" python
	Plug 'davidhalter/jedi-vim', {'for': 'python'}
	Plug 'tmhedberg/SimpylFold', {'for': 'python'}
	Plug 'vim-scripts/indentpython.vim', {'for': 'python'}

	" c/cpp
	Plug 'myint/clang-complete', {'for': ['c', 'cpp', 'cl']}
	"" opencl
	Plug 'petRUShka/vim-opencl', {'for': ['c', 'opencl', 'cpp']}


	call plug#end()
	
	""""""""""""""""""""""""""""""""""""""""
	" Vundle
	""""""""""""""""""""""""""""""""""""""""
	" set nocompatible               " be iMproved
	" filetype off                   " required!
    "
	" set rtp+=~/.vim/bundle/Vundle.vim/
	" call vundle#begin()

	" let Vundle manage Vundle
	" required!
	" Plugin 'VundleVim/Vundle.vim'

	" My Bundles here:
	" Plugin 'mattn/emmet-vim'
	" Plugin 'ervandew/supertab'
	" Plugin 'tpope/vim-surround'
	" Plugin 'pangloss/vim-javascript'
	" Plugin 'StanAngeloff/php.vim.git'
	" Plugin 'scrooloose/nerdtree'
	" Plugin 'Raimondi/delimitMate'
	" Plugin 'tpope/vim-fugitive'
	" Plugin 'tomtom/tcomment_vim'
	" Plugin 'othree/html5.vim'
	" Plugin 'vim-scripts/taglist.vim'
	" Plugin 'othree/javascript-libraries-syntax.vim'
	" Plugin 'hail2u/vim-css3-syntax'
	" Plugin 'myhere/vim-nodejs-complete'
	" Plugin 'Valloric/YouCompleteMe'
	" Plugin 'iblis17/ultisnips.git'
	" Plugin 'vim-scripts/L9'
	" Plugin 'iblis17/vim-snippets'
	" Plugin 'davidhalter/jedi-vim'
	" Plugin 'vim-scripts/renumber.vim'
	" Plugin 'airblade/vim-gitgutter'
	" Plugin 'pep8'
	" Plugin 'vim-go'
	" Plugin 'jst'
	" Plugin 'salt'
	" Plugin 'michaeljsmith/vim-indent-object'
	" Plugin 'jistr/vim-nerdtree-tabs'
	" Plugin 'coffee-script'
	" Plugin 'vim-erlang-omnicomplete'
	" Plugin 'JuliaLang/julia-vim'
	" Plugin 'tmhedberg/SimpylFold'
	" Plugin 'kshenoy/vim-signature'
	" Plugin 'powerline/powerline', {'rtp': 'powerline/bindings/vim/'}
	" Plugin 'vim-scripts/matchit.zip'
	" Plugin 'vim-scripts/AutoComplPop'
	" Plugin 'vim-scripts/indentpython.vim'
	" Plugin 'scrooloose/syntastic'
	" Plugin 'pi314/todo-or-not-todo.vim'

	" original repos on github
	" Bundle 'tpope/vim-fugitive'
	" Bundle 'Lokaltog/vim-easymotion'
	" Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
	" Bundle 'tpope/vim-rails.git'

	" non github repos
	" Bundle 'git://git.wincent.com/command-t.git'

	" call vundle#end()             " required
	" filetype plugin indent on     " required!

	" Brief help
	" :PluginList       - lists configured plugins
	" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
	" :PluginSearch foo - searches for foo; append `!` to refresh local cache
	" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
	"
	" see :h vundle for more details or wiki for FAQ
	" Put your non-Plugin stuff after this line

set listchars=tab:>-,trail:-,eol:$,nbsp:%,extends:>,precedes:<

""""""""""""""""""""""""""""""""""""""""""""""
" Autocmd
""""""""""""""""""""""""""""""""""""""""""""""
" Return to last edit position when opening files
autocmd BufReadPost * silent! normal! g`"zv

autocmd BufRead,BufNewFile *.todo set filetype=rst.todo
